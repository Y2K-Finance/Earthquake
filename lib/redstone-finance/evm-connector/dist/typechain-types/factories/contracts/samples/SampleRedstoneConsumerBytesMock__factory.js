"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleRedstoneConsumerBytesMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "calldataPointersForValues",
                type: "uint256[]",
            },
        ],
        name: "aggregateByteValues",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "calldataPointersToValues",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "pointerToResultBytesInMemory",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
            },
        ],
        name: "getValueSecurely",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "latestSavedValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
            },
        ],
        name: "saveOracleValueInContractStorage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50611731806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806395262d9f11610081578063d22158fa1161005b578063d22158fa14610194578063f50b2efe146101a7578063f90c4924146101ba57600080fd5b806395262d9f1461015b578063b24ebfcc1461016e578063c3e5b9c81461018157600080fd5b80633d60fee3116100b25780633d60fee31461011c578063429989f0146101315780635ddf81ba1461014457600080fd5b806313bc58db146100ce5780633ce142f5146100f7575b600080fd5b6100e16100dc3660046114c1565b6101c1565b6040516100ee9190611599565b60405180910390f35b61010a61010536600461148d565b6102e5565b60405160ff90911681526020016100ee565b61012f61012a366004611581565b6102f6565b005b61010a61013f36600461148d565b61031a565b61014d60005481565b6040519081526020016100ee565b61010a61016936600461148d565b6107f3565b61014d61017c3660046114c1565b6107fe565b61014d61018f366004611581565b610811565b61010a6101a236600461148d565b610834565b61012f6101b5366004611581565b6108bb565b600361010a565b60606000825167ffffffffffffffff8111156101ed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610216578160200160208202803683370190505b50905060005b83518110156102a95736600061025886848151811061024b57634e487b7160e01b600052603260045260246000fd5b60200260200101516108fe565b9092509050813560088202610100031c84848151811061028857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505080806102a19061166c565b91505061021c565b5060006102b58261096e565b90506000816040516020016102cc91815260200190565b60408051601f1981840301815291905295945050505050565b60006102f0826107f3565b92915050565b600061030182610a82565b80516020820151919250600802610100031c6000555050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561035657506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561039057506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156103ca57506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561040457506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561043e57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561047857506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff831614156104b257506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156104ec57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561052657506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561056057506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff8316141561059a5750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156105d45750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff8316141561060e5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156106485750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156106825750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156106bc5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156106f657506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561073057506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561076a57506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156107a457506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60006102f082610834565b60008061080a836101c1565b9392505050565b60008061081d83610a82565b80516020820151919250600802610100031c61080a565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156108b2576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016107ea565b6102f08261031a565b6501812f2590c08110156108fb576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b3660008061090c8460801c90565b90506fffffffffffffffffffffffffffffffff84163661092c82846115ec565b1115610964576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60008151600014156109ac576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b582610aff565b6000600283516109c59190611604565b9050600283516109d591906116a5565b610a52576000610a3d846109ea600185611655565b81518110610a0857634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610a3057634e487b7160e01b600052603260045260246000fd5b6020026020010151610b4d565b9050610a4a600282611604565b949350505050565b828181518110610a7257634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610aca57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610adf81610b59565b600081518110610a7257634e487b7160e01b600052603260045260246000fd5b8051602082016020820281019150805b82811015610b4757815b81811015610b3e578151815180821015610b34578084528183525b5050602001610b19565b50602001610b0f565b50505050565b600061080a82846115ec565b6060600061080a8360606000825167ffffffffffffffff811115610b8d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610bb6578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610be357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c0c578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610c3957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c6c57816020015b6060815260200190600190039081610c575790505b50905060005b8551811015610cd85760408051600380825260808201909252906020820160608036833701905050828281518110610cba57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610cd09061166c565b915050610c72565b506000610ce3610d5e565b90506000610cf082610e6e565b61ffff169050610d016002836115ec565b60405190925060005b82811015610d47576000610d218a89898989610ec1565b9050610d2d81866115ec565b945082604052508080610d3f9061166c565b915050610d0a565b50610d5284876111d2565b98975050505050505050565b60006602ed57011e0000601f1936013581161480610da8576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610de5576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610e1e600362ffffff85166115ec565b610e2891906115ec565b905036610e366002836115ec565b111561080a576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610e7c6020846115ec565b905036811115610eb8576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600080610ed08561134a565b909250905060008080606081600d610ef3610eec6020896115ec565b899061139a565b610efd91906115ec565b90506000610f16610f0f60688d6115ec565b36906113a6565b90506000610f3383610f2960418f6115ec565b610f0f91906115ec565b9050610f3f8382610f52565b9350826020850120945081359650610f76565b60408051838152602081850181019092526000910183838237601f19019392505050565b610f878765ffffffffffff166108bb565b610f9b85610f9660418f6115ec565b6113b2565b9550610fa6866102e5565b60ff1699505050505050505060008060005b8481101561119f57610fcb88858361142a565b909350915060005b8c5181101561118c578c8181518110610ffc57634e487b7160e01b600052603260045260246000fd5b602002602001015184141561117a5760008b828151811061102d57634e487b7160e01b600052603260045260246000fd5b6020026020010151905061104681896001901b16151590565b15801561107d5750600360ff168d838151811061107357634e487b7160e01b600052603260045260246000fd5b6020026020010151105b15611174578c82815181106110a257634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906110b79061166c565b81525050838b83815181106110dc57634e487b7160e01b600052603260045260246000fd5b602002602001015160018f858151811061110657634e487b7160e01b600052603260045260246000fd5b60200260200101516111189190611655565b8151811061113657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c838151811061116757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5061118c565b806111848161166c565b915050610fd3565b50806111978161166c565b915050610fb8565b505050816020826111b091906115ec565b6111ba9190611618565b6111c590604e6115ec565b9998505050505050505050565b60606000835167ffffffffffffffff8111156111fe57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611227578160200160208202803683370190505b509050600360005b8551811015611340578185828151811061125957634e487b7160e01b600052603260045260246000fd5b602002602001015110156112cd5784818151811061128757634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016107ea929190918252602082015260400190565b60006112ff8783815181106112f257634e487b7160e01b600052603260045260246000fd5b60200260200101516107fe565b90508084838151811061132257634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806113388161166c565b91505061122f565b5090949350505050565b60008080808061135b6041876115ec565b9050600061136d610f0f6020846115ec565b80359450905061137e8160036113a6565b62ffffff9490941697933563ffffffff16965092945050505050565b600061080a8284611618565b600061080a8284611655565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611415573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080611439604e876115ec565b9050600061145c61144b6020886115ec565b6114568760016115ec565b9061139a565b61146690836115ec565b9050600061147436836113a6565b803599602090910160801b979097179750505050505050565b60006020828403121561149e578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461080a578182fd5b600060208083850312156114d3578182fd5b823567ffffffffffffffff808211156114ea578384fd5b818501915085601f8301126114fd578384fd5b81358181111561150f5761150f6116e5565b8060051b604051601f19603f83011681018181108582111715611534576115346116e5565b604052828152858101935084860182860187018a1015611552578788fd5b8795505b83861015611574578035855260019590950194938601938601611556565b5098975050505050505050565b600060208284031215611592578081fd5b5035919050565b6000602080835283518082850152825b818110156115c5578581018301518582016040015282016115a9565b818111156115d65783604083870101525b50601f01601f1916929092016040019392505050565b600082198211156115ff576115ff6116b9565b500190565b600082611613576116136116cf565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611650576116506116b9565b500290565b600082821015611667576116676116b9565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561169e5761169e6116b9565b5060010190565b6000826116b4576116b46116cf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122026216449c6dd4f94941ab8f7224a6662715b374884ff8d28880c5d3daa942e3164736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleRedstoneConsumerBytesMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleRedstoneConsumerBytesMock__factory = SampleRedstoneConsumerBytesMock__factory;
SampleRedstoneConsumerBytesMock__factory.bytecode = _bytecode;
SampleRedstoneConsumerBytesMock__factory.abi = _abi;
//# sourceMappingURL=SampleRedstoneConsumerBytesMock__factory.js.map