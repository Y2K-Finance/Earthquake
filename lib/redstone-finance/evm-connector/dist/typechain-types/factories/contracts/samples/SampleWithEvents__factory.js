"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleWithEvents__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "_updatedValue",
                type: "uint256",
            },
        ],
        name: "ValueUpdated",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "emitEventWithLatestOracleValue",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50611562806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b24ebfcc1161005b578063b24ebfcc146100e7578063d22158fa14610108578063f50b2efe1461011b578063f90c49241461012e57600080fd5b80633ce142f51461008d578063429989f0146100b7578063769b5605146100ca57806395262d9f146100d4575b600080fd5b6100a061009b3660046112f3565b610135565b60405160ff90911681526020015b60405180910390f35b6100a06100c53660046112f3565b610146565b6100d261061f565b005b6100a06100e23660046112f3565b610688565b6100fa6100f5366004611327565b610693565b6040519081526020016100ae565b6100a06101163660046112f3565b61069e565b6100d2610129366004611405565b610725565b600a6100a0565b600061014082610688565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561018257506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff831614156101bc57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156101f657506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561023057506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561026a57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff831614156102a457506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff831614156102de57506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff8316141561031857506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561035257506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561038c57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156103c65750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156104005750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff8316141561043a5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156104745750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156104ae5750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156104e85750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff8316141561052257506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561055c57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561059657506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156105d057506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600061064a7f4554480000000000000000000000000000000000000000000000000000000000610768565b90507f4273d0736f60e0dedfe745e86718093d8ec8646ebd2a60cd60643eeced5658118160405161067d91815260200190565b60405180910390a150565b60006101408261069e565b6000610140826107f4565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561071c576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610616565b61014082610146565b6501812f2590c0811015610765576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6040805160018082528183019092526000918291906020808301908036833701905050905082816000815181106107af57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506107c4816107ff565b6000815181106107e457634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b60006101408261080a565b60606101408261090e565b6000815160001415610848576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085182610b0d565b6000600283516108619190611435565b90506002835161087191906114d6565b6108ee5760006108d984610886600185611486565b815181106108a457634e487b7160e01b600052603260045260246000fd5b60200260200101518584815181106108cc57634e487b7160e01b600052603260045260246000fd5b6020026020010151610b5b565b90506108e6600282611435565b949350505050565b8281815181106107e457634e487b7160e01b600052603260045260246000fd5b60606000825167ffffffffffffffff81111561093a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610963578160200160208202803683370190505b5090506000835167ffffffffffffffff81111561099057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109b9578160200160208202803683370190505b5090506000845167ffffffffffffffff8111156109e657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a1957816020015b6060815260200190600190039081610a045790505b50905060005b8551811015610a875760408051600a808252610160820190925290602082016101408036833701905050828281518110610a6957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610a7f9061149d565b915050610a1f565b506000610a92610b6e565b90506000610a9f82610c9c565b61ffff169050610ab060028361141d565b60405190925060005b82811015610af6576000610ad08a89898989610cef565b9050610adc818661141d565b945082604052508080610aee9061149d565b915050610ab9565b50610b01848761101e565b98975050505050505050565b8051602082016020820281019150805b82811015610b5557815b81811015610b4c578151815180821015610b42578084528183525b5050602001610b27565b50602001610b1d565b50505050565b6000610b67828461141d565b9392505050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610bd6576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610c13576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610c4c600362ffffff851661141d565b610c56919061141d565b905036610c6460028361141d565b1115610b67576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610caa60208461141d565b905036811115610ce6576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600080610cfe85611196565b909250905060008080606081600d610d21610d1a60208961141d565b89906111e6565b610d2b919061141d565b90506000610d44610d3d60688d61141d565b36906111f2565b90506000610d6183610d5760418f61141d565b610d3d919061141d565b9050610d6d8382610d80565b9350826020850120945081359650610dc2565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b610dd38765ffffffffffff16610725565b610de785610de260418f61141d565b6111fe565b9550610df286610135565b60ff1699505050505050505060008060005b84811015610feb57610e17888583611294565b909350915060005b8c51811015610fd8578c8181518110610e4857634e487b7160e01b600052603260045260246000fd5b6020026020010151841415610fc65760008b8281518110610e7957634e487b7160e01b600052603260045260246000fd5b60200260200101519050610e9281896001901b16151590565b158015610ec95750600a60ff168d8381518110610ebf57634e487b7160e01b600052603260045260246000fd5b6020026020010151105b15610fc0578c8281518110610eee57634e487b7160e01b600052603260045260246000fd5b602002602001018051809190610f039061149d565b81525050838b8381518110610f2857634e487b7160e01b600052603260045260246000fd5b602002602001015160018f8581518110610f5257634e487b7160e01b600052603260045260246000fd5b6020026020010151610f649190611486565b81518110610f8257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c8381518110610fb357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50610fd8565b80610fd08161149d565b915050610e1f565b5080610fe38161149d565b915050610e04565b50505081602082610ffc919061141d565b6110069190611449565b61101190604e61141d565b9998505050505050505050565b60606000835167ffffffffffffffff81111561104a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611073578160200160208202803683370190505b509050600a60005b855181101561118c57818582815181106110a557634e487b7160e01b600052603260045260246000fd5b60200260200101511015611119578481815181106110d357634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610616929190918252602082015260400190565b600061114b87838151811061113e57634e487b7160e01b600052603260045260246000fd5b6020026020010151610693565b90508084838151811061116e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806111848161149d565b91505061107b565b5090949350505050565b6000808080806111a760418761141d565b905060006111b9610d3d60208461141d565b8035945090506111ca8160036111f2565b62ffffff9490941697933563ffffffff16965092945050505050565b6000610b678284611449565b6000610b678284611486565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611261573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806112a3604e8761141d565b905060006112d06112c96112b860208961141d565b6112c388600161141d565b906111e6565b8390610b5b565b905060006112de36836111f2565b80359960209091013598509650505050505050565b600060208284031215611304578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b67578182fd5b60006020808385031215611339578182fd5b823567ffffffffffffffff80821115611350578384fd5b818501915085601f830112611363578384fd5b81358181111561137557611375611516565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156113b8576113b8611516565b604052828152858101935084860182860187018a10156113d6578788fd5b8795505b838610156113f85780358552600195909501949386019386016113da565b5098975050505050505050565b600060208284031215611416578081fd5b5035919050565b60008219821115611430576114306114ea565b500190565b60008261144457611444611500565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611481576114816114ea565b500290565b600082821015611498576114986114ea565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114cf576114cf6114ea565b5060010190565b6000826114e5576114e5611500565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220be0b93465af3279a71c43bae4bd46de129ebdee4ba284469b82020825500395c64736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleWithEvents__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleWithEvents__factory = SampleWithEvents__factory;
SampleWithEvents__factory.bytecode = _bytecode;
SampleWithEvents__factory.abi = _abi;
//# sourceMappingURL=SampleWithEvents__factory.js.map