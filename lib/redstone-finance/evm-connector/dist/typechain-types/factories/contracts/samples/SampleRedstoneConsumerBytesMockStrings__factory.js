"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleRedstoneConsumerBytesMockStrings__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "calldataPointersForValues",
                type: "uint256[]",
            },
        ],
        name: "aggregateByteValues",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "calldataPointersToValues",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "pointerToResultBytesInMemory",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "latestString",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
            },
        ],
        name: "saveLatestValueInStorage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506117a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806395262d9f11610076578063d22158fa1161005b578063d22158fa14610175578063f50b2efe14610188578063f90c49241461019b57600080fd5b806395262d9f14610141578063b24ebfcc1461015457600080fd5b80633ce142f5116100a75780633ce142f5146100f4578063429989f0146101195780638e1d82011461012c57600080fd5b80630504835b146100c357806313bc58db146100e1575b600080fd5b6100cb6101a2565b6040516100d891906115f4565b60405180910390f35b6100cb6100ef3660046114ee565b610230565b6101076101023660046114ba565b61039e565b60405160ff90911681526020016100d8565b6101076101273660046114ba565b6103af565b61013f61013a3660046115cc565b610888565b005b61010761014f3660046114ba565b6108ae565b6101676101623660046114ee565b6108b9565b6040519081526020016100d8565b6101076101833660046114ba565b6108cc565b61013f6101963660046115cc565b610953565b6003610107565b600080546101af906116d1565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906116d1565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b505050505081565b6060600082511161026d576040517f6c2325dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660006102a18460008151811061029457634e487b7160e01b600052603260045260246000fd5b6020026020010151610996565b91509150600082826040516102b79291906115e4565b604051908190039020905060015b855181101561035d573660006102f488848151811061029457634e487b7160e01b600052603260045260246000fd5b915091508382826040516103099291906115e4565b604051809103902014610348576040517fece458ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505080806103559061170c565b9150506102c5565b5082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b60006103a9826108ae565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff831614156103eb57506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561042557506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff8316141561045f57506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561049957506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff831614156104d357506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561050d57506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561054757506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff8316141561058157506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff831614156105bb57506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff831614156105f557506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff8316141561062f5750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156106695750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156106a35750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156106dd5750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156107175750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156107515750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff8316141561078b57506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff831614156107c557506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff831614156107ff57506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561083957506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600061089382610a06565b80519091506108a9906000906020840190611421565b505050565b60006103a9826108cc565b6000806108c583610230565b9392505050565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561094a576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161087f565b6103a9826103af565b6501812f2590c0811015610993576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b366000806109a48460801c90565b90506fffffffffffffffffffffffffffffffff8416366109c48284611665565b11156109fc576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a4e57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610a6381610a93565b600081518110610a8357634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b606060006108c58360606000825167ffffffffffffffff811115610ac757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610af0578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610b1d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b46578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610b7357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ba657816020015b6060815260200190600190039081610b915790505b50905060005b8551811015610c125760408051600380825260808201909252906020820160608036833701905050828281518110610bf457634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610c0a9061170c565b915050610bac565b506000610c1d610c98565b90506000610c2a82610dc6565b61ffff169050610c3b600283611665565b60405190925060005b82811015610c81576000610c5b8a89898989610e19565b9050610c678186611665565b945082604052508080610c799061170c565b915050610c44565b50610c8c8487611148565b98975050505050505050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610d00576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610d3d576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610d76600362ffffff8516611665565b610d809190611665565b905036610d8e600283611665565b11156108c5576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610dd4602084611665565b905036811115610e10576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600080610e28856112c0565b909250905060008080606081600d610e4b610e44602089611665565b8990611310565b610e559190611665565b90506000610e6e610e6760688d611665565b369061131c565b90506000610e8b83610e8160418f611665565b610e679190611665565b9050610e978382610eaa565b9350826020850120945081359650610eec565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b610efd8765ffffffffffff16610953565b610f1185610f0c60418f611665565b611328565b9550610f1c8661039e565b60ff1699505050505050505060008060005b8481101561111557610f418885836113be565b909350915060005b8c51811015611102578c8181518110610f7257634e487b7160e01b600052603260045260246000fd5b60200260200101518414156110f05760008b8281518110610fa357634e487b7160e01b600052603260045260246000fd5b60200260200101519050610fbc81896001901b16151590565b158015610ff35750600360ff168d8381518110610fe957634e487b7160e01b600052603260045260246000fd5b6020026020010151105b156110ea578c828151811061101857634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061102d9061170c565b81525050838b838151811061105257634e487b7160e01b600052603260045260246000fd5b602002602001015160018f858151811061107c57634e487b7160e01b600052603260045260246000fd5b602002602001015161108e91906116ba565b815181106110ac57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c83815181106110dd57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611102565b806110fa8161170c565b915050610f49565b508061110d8161170c565b915050610f2e565b505050816020826111269190611665565b611130919061167d565b61113b90604e611665565b9998505050505050505050565b60606000835167ffffffffffffffff81111561117457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561119d578160200160208202803683370190505b509050600360005b85518110156112b657818582815181106111cf57634e487b7160e01b600052603260045260246000fd5b60200260200101511015611243578481815181106111fd57634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef500000000000000000000000000000000000000000000000000000000815260040161087f929190918252602082015260400190565b600061127587838151811061126857634e487b7160e01b600052603260045260246000fd5b60200260200101516108b9565b90508084838151811061129857634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806112ae8161170c565b9150506111a5565b5090949350505050565b6000808080806112d1604187611665565b905060006112e3610e67602084611665565b8035945090506112f481600361131c565b62ffffff9490941697933563ffffffff16965092945050505050565b60006108c5828461167d565b60006108c582846116ba565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa15801561138b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806113cd604e87611665565b905060006113f06113df602088611665565b6113ea876001611665565b90611310565b6113fa9083611665565b90506000611408368361131c565b803599602090910160801b979097179750505050505050565b82805461142d906116d1565b90600052602060002090601f01602090048101928261144f5760008555611495565b82601f1061146857805160ff1916838001178555611495565b82800160010185558215611495579182015b8281111561149557825182559160200191906001019061147a565b506114a19291506114a5565b5090565b5b808211156114a157600081556001016114a6565b6000602082840312156114cb578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108c5578182fd5b60006020808385031215611500578182fd5b823567ffffffffffffffff80821115611517578384fd5b818501915085601f83011261152a578384fd5b81358181111561153c5761153c61175b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561157f5761157f61175b565b604052828152858101935084860182860187018a101561159d578788fd5b8795505b838610156115bf5780358552600195909501949386019386016115a1565b5098975050505050505050565b6000602082840312156115dd578081fd5b5035919050565b8183823760009101908152919050565b6000602080835283518082850152825b8181101561162057858101830151858201604001528201611604565b818111156116315783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000821982111561167857611678611745565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116b5576116b5611745565b500290565b6000828210156116cc576116cc611745565b500390565b600181811c908216806116e557607f821691505b6020821081141561170657634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561173e5761173e611745565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122091efea8d3c63e2a02a8cecddc5428fbd34053e4576c77b599b5ca9a2ec4ce1d964736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleRedstoneConsumerBytesMockStrings__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleRedstoneConsumerBytesMockStrings__factory = SampleRedstoneConsumerBytesMockStrings__factory;
SampleRedstoneConsumerBytesMockStrings__factory.bytecode = _bytecode;
SampleRedstoneConsumerBytesMockStrings__factory.abi = _abi;
//# sourceMappingURL=SampleRedstoneConsumerBytesMockStrings__factory.js.map