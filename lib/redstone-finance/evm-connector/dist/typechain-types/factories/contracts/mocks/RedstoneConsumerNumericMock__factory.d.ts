import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { RedstoneConsumerNumericMock, RedstoneConsumerNumericMockInterface } from "../../../contracts/mocks/RedstoneConsumerNumericMock";
declare type RedstoneConsumerNumericMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RedstoneConsumerNumericMock__factory extends ContractFactory {
    constructor(...args: RedstoneConsumerNumericMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<RedstoneConsumerNumericMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): RedstoneConsumerNumericMock;
    connect(signer: Signer): RedstoneConsumerNumericMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610af6806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b24ebfcc1161005b578063b24ebfcc146100d2578063d22158fa146100f3578063f50b2efe14610106578063f90c49241461011b57600080fd5b80633ce142f514610082578063429989f0146100ac57806395262d9f146100bf575b600080fd5b6100956100903660046108b2565b610122565b60405160ff90911681526020015b60405180910390f35b6100956100ba3660046108b2565b610133565b6100956100cd3660046108b2565b61060c565b6100e56100e03660046108e6565b610617565b6040519081526020016100a3565b6100956101013660046108b2565b610622565b6101196101143660046109c4565b6106a9565b005b600a610095565b600061012d8261060c565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561016f57506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff831614156101a957506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156101e357506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561021d57506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561025757506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561029157506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff831614156102cb57506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff8316141561030557506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561033f57506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561037957506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156103b35750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156103ed5750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156104275750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156104615750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff8316141561049b5750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156104d55750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff8316141561050f57506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561054957506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561058357506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156105bd57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600061012d82610622565b600061012d826106ec565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156106a0576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610603565b61012d82610133565b6501812f2590c08110156106e9576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600061012d826000815160001415610730576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61073982610851565b60006002835161074991906109f4565b9050600283516107599190610a1f565b6108085760006107f38461076e600185610a08565b815181106107a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518584815181106107e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161089f565b90506108006002826109f4565b949350505050565b828181518110610841577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050919050565b8051602082016020820281019150805b8281101561089957815b81811015610890578151815180821015610886578084528183525b505060200161086b565b50602001610861565b50505050565b60006108ab82846109dc565b9392505050565b6000602082840312156108c3578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108ab578182fd5b600060208083850312156108f8578182fd5b823567ffffffffffffffff8082111561090f578384fd5b818501915085601f830112610922578384fd5b81358181111561093457610934610a91565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561097757610977610a91565b604052828152858101935084860182860187018a1015610995578788fd5b8795505b838610156109b7578035855260019590950194938601938601610999565b5098975050505050505050565b6000602082840312156109d5578081fd5b5035919050565b600082198211156109ef576109ef610a33565b500190565b600082610a0357610a03610a62565b500490565b600082821015610a1a57610a1a610a33565b500390565b600082610a2e57610a2e610a62565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122009f18597d5ac2ed153497b649f263a68df13130b9943c60404d54e1aedeabcad64736f6c63430008040033";
    static readonly abi: ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
        outputs?: undefined;
        stateMutability?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    })[];
    static createInterface(): RedstoneConsumerNumericMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RedstoneConsumerNumericMock;
}
export {};
//# sourceMappingURL=RedstoneConsumerNumericMock__factory.d.ts.map